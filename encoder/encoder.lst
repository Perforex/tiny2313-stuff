
encoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000001fc  00000290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006e  0080006e  0000029e  2**0
                  ALLOC
  3 .stab         00000d68  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009d6  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000019de  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	79 c0       	rjmp	.+242    	; 0xf6 <__vector_1>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ec ef       	ldi	r30, 0xFC	; 252
  36:	f1 e0       	ldi	r31, 0x01	; 1
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_L__+0x1>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	ae 36       	cpi	r26, 0x6E	; 110
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	ae e6       	ldi	r26, 0x6E	; 110
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a1 37       	cpi	r26, 0x71	; 113
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	87 d0       	rcall	.+270    	; 0x164 <main>
  56:	d0 c0       	rjmp	.+416    	; 0x1f8 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <encoder>:
{
 static uint8_t state=0x03;					//Start with both pins high
 static uint8_t damper;						//Prevents over reporting
 static uint16_t encoder_value=50;			//The value

 state <<=2;								//Save previous state
  5a:	20 91 6a 00 	lds	r18, 0x006A
  5e:	22 0f       	add	r18, r18
  60:	22 0f       	add	r18, r18
  62:	20 93 6a 00 	sts	0x006A, r18
 if(PINB & (1 << ACW)) state |=(1<<0);		//Port 1
  66:	b1 9b       	sbis	0x16, 1	; 22
  68:	03 c0       	rjmp	.+6      	; 0x70 <encoder+0x16>
  6a:	21 60       	ori	r18, 0x01	; 1
  6c:	20 93 6a 00 	sts	0x006A, r18
 if(PINB & (1 << CW)) state |=(1<<1); 		//Port 2
  70:	b0 9b       	sbis	0x16, 0	; 22
  72:	05 c0       	rjmp	.+10     	; 0x7e <encoder+0x24>
  74:	20 91 6a 00 	lds	r18, 0x006A
  78:	22 60       	ori	r18, 0x02	; 2
  7a:	20 93 6a 00 	sts	0x006A, r18
 state &= 0x0f;								//Remove high order nibble
  7e:	20 91 6a 00 	lds	r18, 0x006A
  82:	2f 70       	andi	r18, 0x0F	; 15
  84:	20 93 6a 00 	sts	0x006A, r18
 if(damper)
  88:	30 91 70 00 	lds	r19, 0x0070
  8c:	33 23       	and	r19, r19
  8e:	31 f0       	breq	.+12     	; 0x9c <encoder+0x42>
  {if(state!=15) return(encoder_value); 	//Prevent over reporting
  90:	2f 30       	cpi	r18, 0x0F	; 15
  92:	09 f0       	breq	.+2      	; 0x96 <encoder+0x3c>
  94:	2b c0       	rjmp	.+86     	; 0xec <__stack+0xd>
   else damper=0;}
  96:	10 92 70 00 	sts	0x0070, r1
  9a:	28 c0       	rjmp	.+80     	; 0xec <__stack+0xd>

 if(state==0x0e && encoder_value < (max_encoder_value - precision))
  9c:	2e 30       	cpi	r18, 0x0E	; 14
  9e:	81 f4       	brne	.+32     	; 0xc0 <encoder+0x66>
  a0:	20 91 6b 00 	lds	r18, 0x006B
  a4:	30 91 6c 00 	lds	r19, 0x006C
  a8:	40 91 68 00 	lds	r20, 0x0068
  ac:	50 91 69 00 	lds	r21, 0x0069
  b0:	84 1b       	sub	r24, r20
  b2:	95 0b       	sbc	r25, r21
  b4:	28 17       	cp	r18, r24
  b6:	39 07       	cpc	r19, r25
  b8:	c8 f4       	brcc	.+50     	; 0xec <__stack+0xd>
  {
   encoder_value += precision;
  ba:	24 0f       	add	r18, r20
  bc:	35 1f       	adc	r19, r21
  be:	0f c0       	rjmp	.+30     	; 0xde <encoder+0x84>
   damper=1;
  }
 if(state==0x0d && encoder_value > precision)
  c0:	2d 30       	cpi	r18, 0x0D	; 13
  c2:	a1 f4       	brne	.+40     	; 0xec <__stack+0xd>
  c4:	20 91 6b 00 	lds	r18, 0x006B
  c8:	30 91 6c 00 	lds	r19, 0x006C
  cc:	80 91 68 00 	lds	r24, 0x0068
  d0:	90 91 69 00 	lds	r25, 0x0069
  d4:	82 17       	cp	r24, r18
  d6:	93 07       	cpc	r25, r19
  d8:	48 f4       	brcc	.+18     	; 0xec <__stack+0xd>
  {
   encoder_value -= precision;
  da:	28 1b       	sub	r18, r24
  dc:	39 0b       	sbc	r19, r25
  de:	30 93 6c 00 	sts	0x006C, r19
  e2:	20 93 6b 00 	sts	0x006B, r18
   damper=1;   
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 93 70 00 	sts	0x0070, r24
  } 
 return(encoder_value); 
  ec:	80 91 6b 00 	lds	r24, 0x006B
  f0:	90 91 6c 00 	lds	r25, 0x006C
} 
  f4:	08 95       	ret

000000f6 <__vector_1>:
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	2f 93       	push	r18
 102:	3f 93       	push	r19
 104:	4f 93       	push	r20
 106:	5f 93       	push	r21
 108:	6f 93       	push	r22
 10a:	7f 93       	push	r23
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	af 93       	push	r26
 112:	bf 93       	push	r27
 114:	ef 93       	push	r30
 116:	ff 93       	push	r31
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	80 93 6f 00 	sts	0x006F, r24
 11e:	11 d0       	rcall	.+34     	; 0x142 <debounce>
 120:	ff 91       	pop	r31
 122:	ef 91       	pop	r30
 124:	bf 91       	pop	r27
 126:	af 91       	pop	r26
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	7f 91       	pop	r23
 12e:	6f 91       	pop	r22
 130:	5f 91       	pop	r21
 132:	4f 91       	pop	r20
 134:	3f 91       	pop	r19
 136:	2f 91       	pop	r18
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <debounce>:
 142:	2f ea       	ldi	r18, 0xAF	; 175

00000144 <outerloop>:
 144:	32 e8       	ldi	r19, 0x82	; 130

00000146 <innerloop>:
 146:	00 00       	nop
 148:	00 00       	nop
 14a:	00 00       	nop
 14c:	31 50       	subi	r19, 0x01	; 1
 14e:	30 30       	cpi	r19, 0x00	; 0
 150:	d1 f7       	brne	.-12     	; 0x146 <innerloop>
 152:	21 50       	subi	r18, 0x01	; 1
 154:	20 30       	cpi	r18, 0x00	; 0
 156:	b1 f7       	brne	.-20     	; 0x144 <outerloop>
 158:	4c e0       	ldi	r20, 0x0C	; 12
	...

0000015c <adjust>:
 15c:	41 50       	subi	r20, 0x01	; 1
 15e:	40 30       	cpi	r20, 0x00	; 0
 160:	e9 f7       	brne	.-6      	; 0x15c <adjust>
 162:	08 95       	ret

00000164 <main>:

uint8_t On=0;							// Off / On toggle

int main()
{
	DDRB |= (1<<PMW);					// PWM port set to output
 164:	bb 9a       	sbi	0x17, 3	; 23
	DDRD |= (1<<DBG);					// Debug LED to output
 166:	8b 9a       	sbi	0x11, 3	; 17
	DDRD &= ~(1<<INT);					// Ensure interrupt pin is input
 168:	8a 98       	cbi	0x11, 2	; 17
	
 	ICR1 = currentFreq;					// Frequency = 8,000,000/ICR1 
 16a:	80 91 62 00 	lds	r24, 0x0062
 16e:	90 91 63 00 	lds	r25, 0x0063
 172:	95 bd       	out	0x25, r25	; 37
 174:	84 bd       	out	0x24, r24	; 36
 	OCR1A = ICR1/2;						// Duty cycle = OCR1A/2 = 50%
 176:	84 b5       	in	r24, 0x24	; 36
 178:	95 b5       	in	r25, 0x25	; 37
 17a:	96 95       	lsr	r25
 17c:	87 95       	ror	r24
 17e:	9b bd       	out	0x2b, r25	; 43
 180:	8a bd       	out	0x2a, r24	; 42
 	
 	TCCR1A |= (1<<COM1A1);				// Clear OC1A/OC1B on Compare Match, set OC1A/OC1B at TOP
 182:	8f b5       	in	r24, 0x2f	; 47
 184:	80 68       	ori	r24, 0x80	; 128
 186:	8f bd       	out	0x2f, r24	; 47
  	TCCR1A |= (1<<WGM11);	 			// Fast PWM Mode 14 TOP=ICR1
 188:	8f b5       	in	r24, 0x2f	; 47
 18a:	82 60       	ori	r24, 0x02	; 2
 18c:	8f bd       	out	0x2f, r24	; 47
  	TCCR1B |= (1<<WGM12);
 18e:	8e b5       	in	r24, 0x2e	; 46
 190:	88 60       	ori	r24, 0x08	; 8
 192:	8e bd       	out	0x2e, r24	; 46
  	TCCR1B |= (1<<WGM13);
 194:	8e b5       	in	r24, 0x2e	; 46
 196:	80 61       	ori	r24, 0x10	; 16
 198:	8e bd       	out	0x2e, r24	; 46
  	
   	TCCR1B |= (1<<CS10);				// Scalar = 1
 19a:	8e b5       	in	r24, 0x2e	; 46
 19c:	81 60       	ori	r24, 0x01	; 1
 19e:	8e bd       	out	0x2e, r24	; 46
   	
   	MCUCR |= (1<<ISC00);				// Trigger int0 on rising edge
 1a0:	85 b7       	in	r24, 0x35	; 53
 1a2:	81 60       	ori	r24, 0x01	; 1
 1a4:	85 bf       	out	0x35, r24	; 53
   	MCUCR |= (1<<ISC01);				
 1a6:	85 b7       	in	r24, 0x35	; 53
 1a8:	82 60       	ori	r24, 0x02	; 2
 1aa:	85 bf       	out	0x35, r24	; 53
   	GIMSK |= (1<<INT0);					// Enable int0
 1ac:	8b b7       	in	r24, 0x3b	; 59
 1ae:	80 64       	ori	r24, 0x40	; 64
 1b0:	8b bf       	out	0x3b, r24	; 59
	sei(); 
 1b2:	78 94       	sei
 {
	if(buttonPress)
	 {
		 On=!On;
		 buttonPress=0;
		 PORTD ^= (1<<DBG); 
 1b4:	c8 e0       	ldi	r28, 0x08	; 8
   	GIMSK |= (1<<INT0);					// Enable int0
	sei(); 
 
 while (1) 
 {
	if(buttonPress)
 1b6:	80 91 6f 00 	lds	r24, 0x006F
 1ba:	88 23       	and	r24, r24
 1bc:	61 f0       	breq	.+24     	; 0x1d6 <main+0x72>
	 {
		 On=!On;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 91 6e 00 	lds	r25, 0x006E
 1c4:	91 11       	cpse	r25, r1
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	80 93 6e 00 	sts	0x006E, r24
		 buttonPress=0;
 1cc:	10 92 6f 00 	sts	0x006F, r1
		 PORTD ^= (1<<DBG); 
 1d0:	82 b3       	in	r24, 0x12	; 18
 1d2:	8c 27       	eor	r24, r28
 1d4:	82 bb       	out	0x12, r24	; 18
	 }	 
    if(!On)
 1d6:	80 91 6e 00 	lds	r24, 0x006E
 1da:	81 11       	cpse	r24, r1
 1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <main+0x82>
     {
      OCR1A=0;
 1de:	1b bc       	out	0x2b, r1	; 43
 1e0:	1a bc       	out	0x2a, r1	; 42
      DDRB &= ~(1<<PMW);				// Turn off PWM
 1e2:	bb 98       	cbi	0x17, 3	; 23
 1e4:	e8 cf       	rjmp	.-48     	; 0x1b6 <main+0x52>
     } 
    else 
     {
	  OCR1A=encoder(maxDutyValue);
 1e6:	80 91 64 00 	lds	r24, 0x0064
 1ea:	90 91 65 00 	lds	r25, 0x0065
 1ee:	35 df       	rcall	.-406    	; 0x5a <encoder>
 1f0:	9b bd       	out	0x2b, r25	; 43
 1f2:	8a bd       	out	0x2a, r24	; 42
      DDRB |= (1<<PMW);					// PWM port set to output
 1f4:	bb 9a       	sbi	0x17, 3	; 23
 1f6:	df cf       	rjmp	.-66     	; 0x1b6 <main+0x52>

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
